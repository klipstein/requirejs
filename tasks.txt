- include i18n and text plugins in node integration. Make sure text plugin works?
- Do a release
- Look at jquery ui adapter

- Transport/D support.

- Expore allowing require("./something") inside function callbacks.
  - it means a specific require() function for each module asking for require
  - require.nameToUrl should also allow the relative IDs then.

- require.nameToUrl convertDojo.js for dojo.moduleUrl("dojo", "resources/blank.gif")
  would be cool to pass require.nameToUrl("dojo/resources/blank.gif") and have that work. Why is .js assumed?

- de-dupe plugins in a build, make sure they are only included once? Or does that work already now with
  the latest changes?

- Make sure text plugin works offline.
- Make sure text plugin works in rhino env.
- Get Blackberry simulator. Blackberry greater than 4.6, and particulary with the Blackberry 9500 simulator (with OS v4.7),
install and launch Blackberry MDS service simulator before running simulator to get network.

- trying to find path of the file executed, as given to rhino:
http://groups.google.com/group/jsdoc-2/msg/b1dd2f8991156fa0

- with appName, and no native require, setting path to be outside the baseUrl meant that the require path was really
  relative to the output folder name?

- Use JSDoc to document a full module?

- loading more than one locale for a page. A locales= option? Need this for full
  Dojo conversion.

- Talking with Bryan: onScriptLoad is not really needed in a pure require() case, maybe
allow at least a build pragma to exclude it.

- When doing docs via jsdoc, using {some/module} as return types? How does JSDoc deal with the nested objects?
  Probably needs custom work to get it recognize the module concept thing.

Considered, but not implemented
-------------------------------
- Bryan: test if document load and document domcontentloaded. Safari 3 has trouble, can do addEventListener, but no DOMContentLoaded?
  Tested existing code (uses window load and document domcontentloaded, and require.ready fires correctly in Safari 3.2.3 on Windows, so this is not a high priority
  item.

- Look at module function call during recurse instead of building up the ordered
  array of modules. It was there to prevent issues with small call stacks in older Safaris,
  but now that should not be a problem. Not a big decrease in file size to switching,
  but just means there is fewer looping going on, so bulk perf gain? But it is just one
  loop reduction, small to the amount of function calling going on? Complicates build
  system too, where it overrides callModules to get the list of modules.
